import time
import random

from Huffman import Huffman
from commonly_used import str_xor

leng = 2**30
# rc = time.time()
# c = 2**leng
# print('2**%d: %f'%(leng, time.time()-rc))

rc = time.time()
c = 1<<leng
print('1<<%d: %f'%(leng, time.time()-rc))

# fin = open('lots_txt/test_4m.txt', 'r', encoding='utf-8')
# text = fin.read()
# fin.close()

# rc = time.time()
# dic = {}
# for i in text:
#     if i in dic:
#         dic[i] += 1
#     else:
#         dic[i] = 1
# print('dic 1: ', time.time()-rc)
# rc = time.time()


# rc = time.time()
# fin = open('lots_txt/test_4m.txt', 'r', encoding='utf-8')
# text = fin.read()
# fin.close()
# print('read text: ', time.time()-rc)
# rc = time.time()

# h_text, b_text = Huffman(text)
# print('huffman text: ', time.time()-rc)
# rc = time.time()

# b_fout = open('binary_file.txt', 'w', encoding='utf-8')
# b_fout.write(b_text)
# b_fout.close()
# print('write b_text: ', time.time()-rc)
# rc = time.time()

# r = '10'
# b_xor_r_1 = str_xor(b_text, r)
# print('b_text xor r in 1: ', time.time()-rc)
# rc = time.time()

# b_len = len(b_text)
# r_len = len(r)
# repeat = (b_len//r_len)+1
# r_re = (r*repeat)[:b_len]
# b_int = int(b_text, 2)
# r_re_int = int(r_re, 2)
# b_xor_r_2 = bin(b_int^r_re_int)[2:].rjust(b_len, '0')
# print('b_text xor r in 2: ', time.time()-rc)
# rc = time.time()

# if b_xor_r_1 == b_xor_r_2:
#     print('ok')

# rc = time.time()
# text = ''
# for i in range(2**22):
#         text += chr(random.randint(32, 126))
# print('get text: ', time.time()-rc)

# # 64b~10mb
# convert_name = {64:'64B', 128:'128B', 256:'256B', 512:'512B', 
#                 1024:'1KB', 2048:'2KB', 4096:'4KB', 8192:'8KB', 
#                 16384:'16KB', 2**15:'32KB', 2**16:'64KB', 
#                 2**17:'128KB', 2**18:'256KB', 2**19:'512KB', 
#                 2**20:'1MB', 2**21:'2MB', 2**22:'4MB', 2**21*3:'6MB'
#                 , 2**23:'8MB', 2**21*5:'10MB', 2**24:'16MB'}

# time_b = [64, 128, 256, 512, 1024]
# time_k = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]
# time_m = [1, 2, 4, 6, 8, 10]
# time_t = [64, 128, 256, 512, 1024, 
#           2048, 4096, 8192, 16384, 2**15, 2**16, 2**17, 2**18, 2**19, 2**20, 
#           2**21, 2**22, 2**21*3, 2**23, 2**21*5]

# irsa_enc = [0.033978, 0.040309, 0.065959,
#             0.065959, 0.091268, 0.111931,
#             0.152231, 0.248847, 0.442733,
#             0.830162, 1.572709, 3.083842,
#             6.318137, 13.310838, 29.420897,
#             70.417078, 189.526332, 351.873350,
#             560.775998, 819.290188]

# irsa_enc_pri = [5.210000, 5.210000, 5.240000,
#                 5.240000, 5.260000, 5.280000,
#                 5.320000, 5.420000, 5.610000,
#                 6.000000, 6.740000, 8.260000,
#                 11.490000, 18.480000, 34.590000,
#                 75.590000, 194.700000, 357.050000,
#                 565.950000, 824.460000]

# irsa_dec = [0.028317, 0.037645, 0.046304,
#             0.050969, 0.057962, 0.073287,
#             0.106935, 0.164232, 0.284823,
#             0.528675, 1.011376, 1.979780,
#             4.036848, 8.413818, 18.276087,
#             42.766437, 109.275125, 194.031079,
#             304.888848, 440.900807]

# irsa_dec_rnd = [0.030000, 0.040000, 0.050000,
#                 0.050000, 0.060000, 0.070000,
#                 0.110000, 0.160000, 0.280000,
#                 0.530000, 1.010000, 1.980000,
#                 4.040000, 8.410000, 18.280000,
#                 42.770000, 109.280000, 194.030000,
#                 304.890000, 440.900000]

# arsa_enc = [0.022985, 0.030982, 0.039476,
#             0.046967, 0.068457, 0.089445,
#             0.132428, 0.254367, 0.429235,
#             0.801506, 1.592520, 3.124594,
#             6.495494, 13.501402, 29.080670,
#             69.989636, 191.103314, 362.483691,
#             567.139829, 829.794920]

# arsa_enc_pri = [10.370000, 10.370000, 10.380000,
#                 10.390000, 10.410000, 10.430000,
#                 10.480000, 10.600000, 10.770000,
#                 11.150000, 11.940000, 13.470000,
#                 16.840000, 23.840000, 39.420000,
#                 80.330000, 201.450000, 372.830000,
#                 577.480000, 840.140000]

# arsa_dec = [0.055466, 0.075952, 0.092444,
#             0.106433, 0.113567, 0.127921,
#             0.159901, 0.222863, 0.344288,
#             0.595133, 1.094825, 2.099209,
#             4.266372, 8.749133, 18.290786,
#             43.128524, 109.391287, 205.296698,
#             314.552553, 454.929070]

# arsa_dec_rnd = [0.060000, 0.080000, 0.090000,
#                 0.110000, 0.110000, 0.130000,
#                 0.160000, 0.220000, 0.340000,
#                 0.600000, 1.090000, 2.100000,
#                 4.270000, 8.750000, 18.290000,
#                 43.130000, 109.390000, 205.300000,
#                 314.550000, 454.930000]

# print(arsa_dec_rnd)

# inp = arsa_dec
# out = arsa_dec_rnd
# for i in inp:
#     out += [round(i, 2)]
# for i in range(len(out)):
#     print('%f, '%(out[i]), end='')
#     if i%3 == 2:
#         print()




# convert_name = {64:'64B', 128:'128B', 256:'256B', 512:'512B', 
#                     1024:'1KB', 2048:'2KB', 4096:'4KB', 8192:'8KB', 
#                     16384:'16KB', 2**15:'32KB', 2**16:'64KB', 
#                     2**17:'128KB', 2**18:'256KB', 2**19:'512KB', 
#                     2**20:'1MB', 2**21:'2MB', 2**22:'4MB', 2**23:'8MB', 
#                     2**24:'16MB'}
# input_length = (64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 
#                     2**15, 2**16, 2**17, 2**18, 2**19, 2**20, 2**21, 
#                     2**22, 2**23, 2**24)
# output_file_name = 'irsa_not_const.txt'

# test_times = 10

# record_encode_time = [55.805174589157104, 41.690263748168945, 32.52622723579407, 
#                       55.345027923583984, 48.51837182044983, 46.38756465911865, 
#                       36.056522846221924, 62.79791975021362, 48.28120708465576, 
#                       50.096928119659424, 68.05682706832886, 76.82801723480225, 
#                       120.89738488197327, 181.56218314170837, 362.23222970962524, 
#                       747.9179675579071, 1927.9200036525726, 5857.147855758667, 24025.65988111496]

# record_decode_time = [0.2859535217285156, 0.3806748390197754, 0.4607126712799072, 
#                       0.5236589908599854, 0.5956346988677979, 0.7445306777954102, 
#                       1.0513527393341064, 1.6990056037902832, 2.818300247192383, 
#                       5.196794271469116, 10.034810543060303, 19.552000522613525, 
#                       40.01641345024109, 83.52600312232971, 183.0445692539215, 
#                       413.4303116798401, 1064.5982308387756, 3146.873402118683, 12449.83512377739]
# fout = open(output_file_name, 'w', encoding='utf-8')
# index = 0
# for i in input_length:
#     fout.write('encode %s: %f \n'%(convert_name[i], record_encode_time[index]/test_times))
#     fout.write('decode %s: %f \n'%(convert_name[i], record_decode_time[index]/test_times))
#     fout.write('======================================================= \n')
#     index += 1
# fout.close()

